#include <iostream>
#include <thread>
#include <vector>
#include <mutex>
#include <chrono>
#include <random>

class ThermalCamera {
public:
    bool detectFire() {
        // Simulate fire detection logic
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        return rand() % 2; // Randomly returns true or false
    }
};

class Extinguisher {
public:
    void activate() {
        std::cout << "Extinguisher activated!" << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(3)); // Simulate extinguishing fire
        std::cout << "Fire extinguished!" << std::endl;
    }
};

class Drone {
private:
    ThermalCamera camera;
    Extinguisher extinguisher;
    std::mutex mtx;
    bool fireDetected = false;

public:
    void monitor() {
        while (true) {
            if (camera.detectFire()) {
                std::lock_guard<std::mutex> lock(mtx);
                fireDetected = true;
                std::cout << "Fire detected!" << std::endl;
                extinguishFire();
            }
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
    }

    void extinguishFire() {
        std::thread extinguisherThread(&Extinguisher::activate, &extinguisher);
        extinguisherThread.detach();
    }
};

int main() {
    srand(static_cast<unsigned int>(time(0)));
    Drone drone;
    std::thread monitorThread(&Drone::monitor, &drone);
    monitorThread.join();
    return 0;
}
